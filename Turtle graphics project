Extended a custom Turtle graphics class in Java by adding support for penUp/penDown 
functionality and right-turn logic, enabling movement without drawing and more flexible 
control of direction.

Turtle.java file

/**
 * Turtle graphics using Java classes
 */

import java.awt.Canvas;
import java.awt.Graphics;
import javax.swing.JFrame;
import java.awt.Color;
import java.util.ArrayList;
import java.awt.geom.Line2D;

public class Turtle extends Canvas {

    /**
     * Instance variables
     */
    final int WIDTH = 500;
    final int HEIGHT = 400;

    // Position and direction variables
    private double x;
    private double y;
    private double angle;

    // List of segments generated by moving
    private ArrayList<Line2D> lines;

    // Pen state
    private boolean penDown;

    /**
     * Constructor
     */
    public Turtle() {
        setSize(WIDTH, HEIGHT);

        // Start the turtle in the center
        this.x = WIDTH / 2.0;
        this.y = HEIGHT / 2.0;
        this.angle = 0.0;

        // Start with the pen down
        this.penDown = true;

        // Create the list of lines
        this.lines = new ArrayList<Line2D>();
    }

    /**
     * turnLeft -- adjust the Turtle's angle
     *
     * @param degrees counter-clockwise change in angle
     */
    public void turnLeft(double degrees) {
        this.angle += degrees;
    }

    /**
     * turnRight -- adjust the Turtle's angle clockwise
     *
     * @param degrees clockwise change in angle
     */
    public void turnRight(double degrees) {
        this.angle -= degrees;
    }

    /**
     * Helper method -- calculate cosine of an angle in degrees
     *
     * @param theta angle in degrees
     * @return cos(theta)
     */
    public double cosDeg(double theta) {
        return Math.cos(Math.toRadians(theta));
    }

    /**
     * Helper method -- calculate sine of an angle in degrees
     *
     * @param theta angle in degrees
     * @return sin(theta)
     */
    public double sinDeg(double theta) {
        return Math.sin(Math.toRadians(theta));
    }

    /**
     * move -- move the Turtle in its current facing direction
     *
     * @param dist the linear distance for the move
     */
    public void move(double dist) {
        double newX = this.x + cosDeg(this.angle) * dist;
        double newY = this.y - sinDeg(this.angle) * dist;

        if (penDown) {
            Line2D newLine = new Line2D.Double(this.x, this.y, newX, newY);
            this.lines.add(newLine);
        }

        this.x = newX;
        this.y = newY;
    }

    /**
     * penUp -- move without drawing
     */
    public void penUp() {
        this.penDown = false;
    }

    /**
     * penDown -- move and draw
     */
    public void penDown() {
        this.penDown = true;
    }

    /**
     * paint -- contains all drawing operations
     *
     * @param g Graphics object that refers to the drawable surface
     */
    public void paint(Graphics g) {
        // Fill background white
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, WIDTH, HEIGHT);

        // Draw lines in black
        g.setColor(Color.BLACK);
        for (Line2D line : this.lines) {
            int startX = (int) line.getX1();
            int startY = (int) line.getY1();
            int endX = (int) line.getX2();
            int endY = (int) line.getY2();
            g.drawLine(startX, startY, endX, endY);
        }
    }}

TurtleDrive.java 

* TurtleDriver
 *
 * Reads turtle commands from a file and controls the Turtle
 */

import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import javax.swing.JFrame;

public class TurtleDriver {
    /**
     * Read Turtle commands from a file
     */
    public static void main(String[] args) {
        // New Turtle
        Turtle t = new Turtle();

        // Setup the JFrame
        JFrame frame = new JFrame();
        frame.add(t);
        frame.pack();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Open an example file with Scanner
        Scanner input = null;
        try {
            input = new Scanner(new File("example.tl"));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        // Loop through the file's lines
        while (input.hasNextLine()) {
            // Read the next line
            String line = input.nextLine();

            // Skip lines that start with a semicolon
            if (line.startsWith(";") || line.isEmpty()) {
                continue;
            }

            // Split the line into the command and any additional arguments
            String[] parts = line.split(" ");
            String command = parts[0];

            // Move command
            if (command.equalsIgnoreCase("move")) {
                double distance = Double.parseDouble(parts[1]);
                t.move(distance);
            }

            // Turnleft command
            else if (command.equalsIgnoreCase("turnleft")) {
                double degrees = Double.parseDouble(parts[1]);
                t.turnLeft(degrees);
            }

            // Turnright command
            else if (command.equalsIgnoreCase("turnright")) {
                double degrees = Double.parseDouble(parts[1]);
                t.turnRight(degrees);
            }

            // Penup command
            else if (command.equalsIgnoreCase("penup")) {
                t.penUp();
            }

            // Pendown command
            else if (command.equalsIgnoreCase("pendown")) {
                t.penDown();
            }
        }

        // Repaint after all commands are processed
        t.repaint();
    }
}

